; Rutines per Timers
;
; 


; //////////////////////////////////
; ///////// TIMERINI ///////////////
; //////////////////////////////////
; Inicia els timers a zero
; Cal RAM : TIMER, TIMEREND
; Toca	  : HL
; Retorna : res
; Usa fun.: 
TIMERINI:
	ld	HL,TIMER
	ld	B,TIMEREND-TIMER
	xor	A
@@LOOP:
	ld	[HL],A
	inc	HL
	djnz	@@LOOP
	
	ret
	
	
; //////////////////////////////////
; ///////// TIMERUPDATE ////////////
; //////////////////////////////////
; Actualitza els Timers fent la resta de 1
; Cal RAM : TIMER, TIMEREND
; Toca	  : HL
; Retorna : res
; Usa fun.: 
TIMERUPDATE:
	ld	HL,TIMER
	ld	B,TIMEREND-TIMER
@@LOOP:
	ld	A,[HL]
	or	A
	jr	z,@@END
	dec	A
	ld	[HL],A	
@@END:
	inc	HL
	djnz	@@LOOP
	
	ret
	
	
; //////////////////////////////////
; ///////// TIMERSET /////////////
; //////////////////////////////////
; Carrega un valor al timer triat
; Cal RAM : TIMER, TIMEREND
; Toca	  : HL,DE
; Param   : B = Num Timer
;	    C = Valor a carregar al timer
; Retorna : res
; Usa fun.: 
TIMERSET:
	push	DE
	push	HL
	ld	E,B
	ld	D,0
	ld	HL,TIMER
	add	HL,DE	; Preparo punter per setejar el timer
	ld	[HL],C
	pop	HL
	pop	DE
	
	ret
	
	
; //////////////////////////////////
; ///////// TIMERCHECK /////////////
; //////////////////////////////////
; Ens diu si el timer esta a zero ja o no.
; Cal RAM : TIMER, TIMEREND
; Toca	  : HL,BC
; Param   : A = Num Timer
; Retorna : Flag Z si el Timer esta a Zero.
; Usa fun.: 
TIMERCHECK:
	push	HL
	push	BC
	ld	C,A
	ld	B,0
	ld	HL,TIMER
	add	HL,BC	; Preparo punter per verificar timer
	ld	A,[HL]
	or	A	; Seteja el Flag Z
	pop	BC
	pop	HL
	
	ret

; //////////////////////////////
; ///////// GETRND /////////////
; //////////////////////////////
; Genera un numero aleatori de 0 a 255
; Cal RAM : TIMER
; Toca	  : HL
; Param   :
; Retorna : A = RND % 256
; Usa fun.: 
; Original de : 
; http://www.smspower.org/Development/RandomNumberGenerator
GETRND:
	push	HL
        ld 	HL,[TIM_RND]
        ld 	A,H		; get high byte
        rrca		; rotate right by 2
        rrca
        xor 	H		; xor with original
        rrca		; rotate right by 1
        xor 	L		; xor with low byte
        rrca		; rotate right by 4
        rrca
        rrca
        rrca
        xor	L		; xor again
        rra		; rotate right by 1 through carry
        adc 	HL,HL	; add TIM_RND to itself
        jr	nz,@@ADD
        ld	HL,733Ch    ; if last xor resulted in zero then re-seed random number generator
@@ADD:
	jp	TIM_RNDSEEDINIT_FROM_GET
	
; //////////////////////////////
; ////// TIM_RNDSEEDINIT ///////
; //////////////////////////////
; Reinicia la semilla del random con el numero R
; Si se llama en lugares que no siempre tarda lo mismo en pasar,
;  queda bastante realista.
TIM_RNDSEEDINIT:
	push	HL
	ld	HL,[TIM_RND]
TIM_RNDSEEDINIT_FROM_GET:
	ld	A,R         ; R = refresh register = semi-random number
        xor	L          ; xor with l which is fairly random
        ld 	[TIM_RND],HL
	pop	HL
	
	ret
