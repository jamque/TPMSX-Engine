; ///////////////////////////////////
; ///////// IWBVRMRLE 2 /////////////
; ///////////////////////////////////

; Write Bloq Video RaM en compresio RLE 2 amb codi de control
; al primer byte del block
; volca bytes desde direccio RAM HL a la direccio VRAM DE
; No utilitza BIOS, CAL deshabilitar les interupcions
; 29/12/04 Arnau Castellvi / Zona Neutra
; 2012 Rafel Arreglos RLE
; 2016 Rafel Arreglos RLE2

; HL = 	direccio RAM [codi de control al primer byte del block]
; DE = 	direccion VRAM

; Cal RAM : res
; Toca	  : A,BC,DE,HL
; Retorna : res
; Usa fun.: res

; E = byte de control
; D = byte a pujar a VRAM
IWBVRMRLE2:
	ld 	A,E
	out 	(99h),A
	ld 	A,D
	or 	40h
	out 	(99h),A
	ld 	C,98h

	ld	A,(HL)	; Leo byte de control
	inc	HL
	ld	E,A	; Guardo en E el byte de control
.LOOP:
	call	READRLE1DATA ; Si devuelve 0 bytes a copiar [B] ya es fin
	ld	A,B
	or	A
	ret	z

	; Loop de copia
.COPY_VRAM:
	out	(C),D	; copio dato en D a VRAM
	nop
	; *** a√±adido de hacer cambio de paleta a mano como interrupcion
	;m_MANUAL_IE IWBVRMRLE2
	dec	B
	jp	nz,.COPY_VRAM
	;djnz	.COPY_VRAM
	jp	.LOOP
.FI:
	ret
	

; ///////////////////////////////////
; ///////// READRLE1DATA ////////////
; ///////////////////////////////////
; HL = 	direccio RAM  del byte a llegir.
; E  =  byte de control [bytecode]

; Cal RAM : res
; Toca	  : A,BC,DE,HL
;	Incrementa HL y lo deja listo para leer el siguiente datoRLE
; Retorna :
; 	D = byte a copiar
;	B = veces que se ha de copiar
; Usa fun.: res
READRLE1DATA:
	ld	A,(HL)	; Leo byte
	inc	HL
	cp	E	; Si byte es bytecode
	jr	nz,.NOES_BYTECODE
	ld	A,(HL)		; Leo byte
	inc	HL
.CONTROL_0:
	or	A
	jr	nz,.CONTROL_1
	; Case 0: Fi de datas
	ld	B,0  ; Un cero en B indica que ya no hay mas datos que copiar
	jr	.END
.CONTROL_1:
	cp	1
	jr	nz,.CONTROL_2
	; Case 1: copiar 1 vez el byte de control
	ld	B,1	; a copiar 1 vez
	ld	D,E	; Pongo byte de control
	jr	.END
.CONTROL_2:
	cp	2
	jr	nz,.CONTROL_N
	; Case 2: copiar 2 veces el byte de control
	ld	B,2	; a copiar 2 veces
	ld	D,E	; Pongo byte de control
	jr	.END
.CONTROL_N:
	; Case N: copiar N veces el byte de control
	ld	B,A	; a copiar N veces
	ld	A,(HL)	; Leo byte
	inc	HL
	ld	D,A	; Pongo byte leido a copiar
	jr	.END
.NOES_BYTECODE:
	ld	B,1	; a copiar 1 vez
	ld	D,A	; el byte que esta sin comprimir
.END:
	ret
	
; ///////////////////////////////////
; ///////// WBRMRMRLE 2 /////////////
; ///////////////////////////////////

; Write Bloq RaM to RaM en compresio RLE 2 amb codi de control
; al primer byte del block
; volca bytes desde direccio RAM HL a la direccio RAM DE
; No utilitza BIOS

; HL = 	direccio RAM origen [codi de control al primer byte del block]
; DE = 	direccio RAM destino

; Cal RAM : res
; Toca	  : A,BC,DE,HL
; Retorna : res
; Usa fun.: res

; E = byte de control
; D = byte a pujar a VRAM
WBRMRMRLE2:
	push	DE
	pop	IY	; Direccion destino en IY
	
	ld	A,(HL)	; Leo byte de control
	inc	HL
	ld	E,A	; Guardo en E el byte de control
.LOOP:
	call	READRLE1DATA ; Si devuelve 0 bytes a copiar [B] ya es fin
	ld	A,B
	or	A
	jr	z,.FI

	; Loop de copia
.COPY_RAM:
	ld	(IY),D	; copio dato en D RAM Registro IY
	inc	IY
	djnz	.COPY_RAM
	jr	.LOOP
.FI:
	ret
